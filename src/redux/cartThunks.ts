import { createAsyncThunk } from "@reduxjs/toolkit";
import { RootState } from "./store"; // –ü–æ–¥–∫–ª—é—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ç–∏–ø–∞ RootState
import { addToCart, removeFromCart, updateQuantity, clearCart } from "./cartSlice";

// –¢–∏–ø –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
interface CartItem {
  id: number;
  quantity: number;
  price: number;
}

// –¢–∏–ø –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã)
interface CartResponse {
  items: CartItem[];
  totalAmount: number;
}

// üõí –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
export const fetchCart = createAsyncThunk<CartResponse>("cart/fetchCart", async () => {
  const response = await fetch("https://skillfactory-task.detmir.team/cart");
  if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã");
  return response.json(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º CartResponse
});

// üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
export const updateCartOnServer = createAsyncThunk<CartResponse, void, { state: RootState }>(
    "cart/updateCart",
    async (_, { getState }) => {
      const state = getState();
      const response = await fetch("https://skillfactory-task.detmir.team/cart/update", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ items: state.cart.items }),
      });
      if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã");
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
      return response.json(); // –í–µ—Ä–Ω–µ–º CartResponse, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç items –∏ totalAmount
    }
  );

// ‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
export const submitOrder = createAsyncThunk<void, void, { dispatch: any }>(
  "cart/submitOrder",
  async (_, { dispatch }) => {
    const response = await fetch("https://skillfactory-task.detmir.team/cart/submit", {
      method: "POST",
    });
    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞");
    dispatch(clearCart()); // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
  }
);
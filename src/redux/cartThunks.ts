import { createAsyncThunk } from "@reduxjs/toolkit";
import { RootState } from "./store"; 
import { clearCart } from "./cartSlice";

// –¢–∏–ø –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
export interface CartItem {
  id: number;
  title: string;  
  picture: string;
  quantity: number;
  price: number;
}

// –¢–∏–ø –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã)
export interface CartResponse {
  items: CartItem[];
  totalAmount: number;
}

// üîΩ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ + –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
export const fetchCart = createAsyncThunk<CartResponse>("cart/fetchCart", async () => {
  const cartResponse = await fetch("https://skillfactory-task.detmir.team/cart", {
    method: "GET",
    credentials: "include",
  });
  if (!cartResponse.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã");
  const cartData = await cartResponse.json();

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
  const productPromises = cartData.map(async (item: any) => {
    console.log(`üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä: ${item.product.id}`);
    
    const productResponse = await fetch(`https://skillfactory-task.detmir.team/products/${item.product.id}`, {
      method: "GET",
      credentials: "include",
    });
    if (!productResponse.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞ ${item.product.id}`);
      return null;
    }
    return productResponse.json();
  });

  const productsData = await Promise.all(productPromises);

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
  const items = cartData.map((item: any, index: number) => {
    const product = productsData[index];
    return {
      id: product.id,
      title: product.title,
      picture: product.picture,
      quantity: item.quantity,
      price: product.price,
    };
  });

  return {
    items,
    totalAmount: items.reduce((sum: number, item: CartItem) => sum + item.price * item.quantity, 0),
  };
});

// üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
export const updateCartOnServer = createAsyncThunk<CartResponse, void, { state: RootState }>(
    "cart/updateCart",
    async (_, { getState }) => {
      const state = getState();
      const items = state.cart.items;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const payload = {
        data: items.map((item: CartItem) => ({
          id: item.id.toString(), 
          quantity: item.quantity,
        }))
      };
      console.log("üîç Payload –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:", JSON.stringify(payload, null, 2));

      const response = await fetch("https://skillfactory-task.detmir.team/cart/update", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
        credentials: "include",
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã");
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
      return response.json(); 
    }
  );

// ‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
export const submitOrder = createAsyncThunk<void, void, { dispatch: any }>(
  "cart/submitOrder",
  async (_, { dispatch, getState }) => {
    const state: RootState = getState() as RootState;
    const items = state.cart.items; 

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const payload = {
      data: items.map((item: CartItem) => ({
        id: item.id.toString(),
        quantity: item.quantity,
      }))
    };

    const response = await fetch("https://skillfactory-task.detmir.team/cart/submit", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
      credentials: "include", 
    });
    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞");

    // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    dispatch(clearCart());
  }
);